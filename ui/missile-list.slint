import { HorizontalBox, Button, ScrollView, StandardButton, CheckBox } from "std-widgets.slint";
export struct MissileData {
    path: string,
    designation: string,
    nickname: string,
    template-name: string,
    cost: int,
    selected: bool
}

component MissileListItem inherits TouchArea {
    in-out property <string> designation;
    in-out property <string> nickname;
    in-out property <string> template-name;
    in-out property <int> cost;
    in property <color> background-colour;

    callback viewing();

    clicked => {
        root.viewing();
    }

    Rectangle {
        height: 18px;
        background: background-colour;
    
        HorizontalLayout {
            spacing: 100px;
            padding-right: 5px;
            Text {
                overflow: elide;
                wrap: no-wrap;
                text: designation + " " + nickname;
                horizontal-stretch: 1.0;
                font-size: 16px;
            }
            HorizontalLayout {
                alignment: end;
                Text {
                    overflow: elide;
                    wrap: no-wrap;
                    color: rgba(255, 255, 255, 0.5);
                    text: cost + "pts";
                    horizontal-alignment: right;
                }
            }
        }

        border-width: 1px;
        border-color: rgba(255, 255, 255, 0.1);
    }
}

component ActionsPane inherits VerticalLayout {
    spacing: 5px;
    max-width: 240px;

    callback update-fleets();

    Button {
        text: "Update fleets";
        clicked => {
            root.update-fleets();
        }
    }

    Rectangle {
        vertical-stretch: 1.0;
    }
}

export component UpdateMissilesConfirmDialog inherits Window {
    in-out property <[string]> fleet-names;
    in property <[string]> confirmed-fleets;

    callback confirmed-update-fleets([string]);
    callback confirm-fleet(string);
    callback unconfirm-fleet(string);

    max-height: 600px;
    width: 200px;

    VerticalLayout {
        Text {
            text: "Are you sure you want to update these fleets?";
            font-size: 18px;
        }

        ScrollView {
            VerticalLayout {
                for name[idx] in fleet-names: CheckBox {
                    checked: true;
                    text: name;

                    init => {
                        root.confirm-fleet(name);
                    }
                    toggled => {
                        if self.checked {
                            root.confirm-fleet(name);
                        } else {
                            root.unconfirm-fleet(name);
                        }
                    }
                }
            }
        }

        VerticalLayout {
            alignment: end;
            Button {
                text: "Confirm";
                clicked => {
                    root.visible = false;
                    root.confirmed-update-fleets(confirmed-fleets);
                }
            }
        }
    }
}

export component MissileWindow inherits Window {
    title: "Missiles";

    preferred-width: 800px;
    preferred-height: 600px;

    in-out property <[MissileData]> missiles;
    out property <int> cur-missile-idx;

    callback viewing(int);
    callback reload-missiles();
    callback update-fleets-with-missile(int);

    // Error popup
    property <string> error-popup-title;
    property <string> error-popup-message;
    public function show-error-popup(title: string, message: string) {
        error-popup-title = title;
        error-popup-message = message;
        error-popup.show();
    }
    error-popup := PopupWindow {
        height: main-window.height;
        width: main-window.width;
        x: 0;
        y: 0;
        close-policy: no-auto-close;

        VerticalLayout {
            Rectangle {}
            HorizontalLayout {
                Rectangle {}
                Rectangle {
                    max-width: 600px;
                    height: 25%;
                    border-radius: 4px;
                    background: rgba(0, 0, 0, 0.8);
                    VerticalLayout {
                        padding: 10px;
                        Text {
                            wrap: char-wrap;
                            text: error-popup-title;
                            font-size: 24px;
                        }

                        Text {
                            wrap: word-wrap;
                            text: error-popup-message;
                            font-size: 12px;
                        }

                        StandardButton {
                            kind: ok;
                            clicked => {
                                error-popup.close();
                            }
                        }
                    }
                }
                Rectangle {}
            }
            Rectangle {}
        }
    }

    main-window := HorizontalLayout {
        VerticalLayout {
            alignment: start;
            b := HorizontalLayout {
                Text {
                    text: "Missiles";
                    font-size: 24px;
                }
                HorizontalLayout {
                    alignment: end;
                    Button {
                        text: "Refresh";
                        clicked => {
                        }
                    }
                }
            }

            ScrollView {
                height: min(main-window.height - b.preferred-height - 4px, h.preferred-height);
                h := VerticalLayout {
                    for missile[idx] in missiles: MissileListItem {
                        designation: missile.designation;
                        nickname: missile.nickname;
                        template-name: missile.template-name;
                        cost: missile.cost;

                        viewing => {
                            missile.selected = !missile.selected;
                            if missile.selected {
                                root.viewing(idx);
                                cur-missile-idx = idx;
                            }
                            else {
                                root.viewing(-1);
                                cur-missile-idx = -1;
                            }
                        }
                        states [
                            selected when missile.selected: {
                                background-colour: rgba(204, 134, 092, 1);
                            }
                            unselected when !missile.selected: {
                                background-colour: rgba(0, 0, 0, 0);
                            }
                        ]
                    }
                }
            }
        }

        VerticalLayout {
                width: 240px;
                
                Text {
                    height: b.height;
                    font-size: 24px;
                    text: "Actions";
                }

                actions-pane := ActionsPane {
                    update-fleets => {
                        root.update-fleets-with-missile(cur-missile-idx);
                    }
                }
            }
    }
}