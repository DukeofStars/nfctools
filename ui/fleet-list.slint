import { Button, GridBox, VerticalBox, HorizontalBox, LineEdit, ScrollView, StandardButton, SpinBox, ComboBox, TextEdit, CheckBox, GroupBox } from "std-widgets.slint";

export struct FleetData {
    path: string,
    short-path: string,
    name: string,
    selected: bool,
}

export struct Tag {
    name: string,
    color: color,
}

component FleetListItem inherits TouchArea {
    in-out property <string> name;
    in property <string> short-path;
    in property <color> background-colour;

    callback viewing();

    clicked => {
        root.viewing();
    }

    Rectangle {
        height: 18px;
        background: background-colour;
    
        HorizontalLayout {
            spacing: 100px;
            padding-right: 5px;
            Text {
                overflow: elide;
                wrap: no-wrap;
                text: name;
                horizontal-stretch: 1.0;
                font-size: 16px;
            }
            HorizontalLayout {
                alignment: end;
                Text {
                    overflow: elide;
                    wrap: no-wrap;
                    color: rgba(255, 255, 255, 0.5);
                    text: short-path;
                    horizontal-alignment: right;
                    // font-size: 16px;
                }
            }
        }

        border-width: 1px;
        border-color: rgba(255, 255, 255, 0.1);
    }
}

component ActionsPane inherits VerticalLayout {
    in-out property <[Tag]> tags;

    callback merge(string);
    callback open-fleet-editor();
    callback add-tag(Tag);
    callback remove-tag(int);
    callback lookup-tag(string);

    public function get-description() -> string {
        desc-input.text
    }
    public function set-description(desc: string) {
        desc-input.text = desc;
    }
    public function set-tag-color(color: color) {
        r.text = color.red;
        g.text = color.green;
        b.text = color.blue;
    }

    spacing: 5px;
    max-width: 240px;

    Button {
        text: "Open Fleet Editor";
        clicked => {
            root.open-fleet-editor();
        }
    }

    HorizontalLayout {
        merge-output-name-input := LineEdit {
            text: "";
        }

        Button {
            text: "Merge";
            clicked => {
                root.merge(merge-output-name-input.text);
            }
        }
    }

    Text {
        text: "Tags";
        font-size: 16px;
    }
    
    HorizontalLayout {
        tag-name := LineEdit {
            placeholder-text: "Tag Name";

            edited(text) => {
                root.lookup-tag(text);
            }
        }
        Button {
            text: "Add";
            clicked => {
                root.add-tag({
                    name: tag-name.text,
                    color: rgb(r.text.to-float(), g.text.to-float(), b.text.to-float())
                });
            }
        }
    }
    t := HorizontalLayout{
        r := LineEdit {
            width: t.width/4;
            horizontal-stretch: 0.0;
            placeholder-text: "R";
        }
        g := LineEdit {
            width: t.width/4;
            horizontal-stretch: 0.0;
            placeholder-text: "G";
        }
        b := LineEdit {
            width: t.width/4;
            horizontal-stretch: 0.0;
            placeholder-text: "B";
        }
        Rectangle {
            Text {
                color: rgb(r.text.to-float(), g.text.to-float(), b.text.to-float());
                text: "PREVIEW";
            }
        }
    }
     
    a := GridLayout {
        Row {
            HorizontalLayout {
                spacing: 2px;
                padding-bottom: 2px;
                for i in 4: ta1 := TouchArea {
                    width: 60px;
                    clicked => {
                        root.remove-tag(i);
                    }

                    Rectangle {
                        width: 60px;
                        property <Tag> tag: tags[i];
                        border-radius: 2px;
                        Text {
                            horizontal-alignment: center;
                            width: 60px;
                            overflow: clip;
                            text: tag.name;
                            color: tag.color;
                        }

                        states [
                            selected when ta1.has-hover: {
                                background: Colors.lightgrey;
                            }
                            unselected when !ta1.has-hover: {
                                background: transparent;
                            }
                        ]
                    }
                }
            }
        }
        Row {
            HorizontalLayout {
                spacing: 2px;
                padding-bottom: 2px;
                for i in 4: ta2 := TouchArea {
                    width: 60px;
                    clicked => {
                        root.remove-tag(i+4);
                    }

                    Rectangle {
                        width: 60px;
                        property <Tag> tag: tags[i+4];
                        border-radius: 2px;
                        Text {
                            horizontal-alignment: center;
                            width: 60px;
                            overflow: clip;
                            text: tag.name;
                            color: tag.color;
                        }

                        states [
                            selected when ta2.has-hover: {
                                background: Colors.lightgrey;
                            }
                            unselected when !ta2.has-hover: {
                                background: transparent;
                            }
                        ]
                    }
                }
            }
        }
        Row {
            HorizontalLayout {
                spacing: 2px;
                padding-bottom: 2px;
                for i in 4: ta3 := TouchArea {
                    width: 60px;
                    clicked => {
                        root.remove-tag(i+8);
                    }

                    Rectangle {
                        width: 60px;
                        property <Tag> tag: tags[i+8];
                        border-radius: 2px;
                        Text {
                            horizontal-alignment: center;
                            width: 60px;
                            overflow: clip;
                            text: tag.name;
                            color: tag.color;
                        }

                        states [
                            selected when ta3.has-hover: {
                                background: Colors.lightgrey;
                            }
                            unselected when !ta3.has-hover: {
                                background: transparent;
                            }
                        ]
                    }
                }
            }
        }
    }

    HorizontalLayout {
        Text {
            vertical-alignment: center;
            text: "Edit Description";
            font-size: 16px;
        }

        // Button {
        //     width: 40%;
        //     text: "Save";
        //     clicked => {
        //         desc-input.text;
        //         root.save-description(desc-input.text);
        //     }
        // }
    }

    desc-input := TextEdit {
        font-size: 12px;
        wrap: word-wrap;
        text: "";
    }
}

export component MainWindow inherits Window {
    title: "NebTools";

    preferred-width: 800px;
    preferred-height: 600px;
    
    in-out property <[FleetData]> fleets;
    
    in-out property <bool> multi-selecting: false;

    in property <bool> shutdown-state: false; 

    in-out property <[Tag]> tags;

    out property <int> cur-fleet-idx;
    
    callback merge(string);
    callback viewing(int);
    callback save-description();
    callback reload-fleets();
    callback open-fleet-editor();
    callback add-tag(Tag);
    callback remove-tag(int);
    callback lookup-tag(string);
    callback close-without-saving();

    callback open-missiles-view();
    callback open-win-predictor();

    public function get-description() -> string {
        actions-pane.get-description()
    }
    public function set-description(desc: string) {
        actions-pane.set-description(desc);
    }
    public function set-tag-color(color: color) {
        actions-pane.set-tag-color(color);
    }

    forward-focus: key-handler;
    key-handler := FocusScope {
        key-pressed(event) => {
            if (event.text == Key.Control) {
                root.multi-selecting = true;
                accept
            }
            reject
        }
        key-released(event) => {
            if (event.text == Key.Control) {
                root.multi-selecting = false;
                accept
            }
            reject
        }
    }

    // Error popup
    property <string> error-popup-title;
    property <string> error-popup-message;
    public function show-error-popup(title: string, message: string) {
        error-popup-title = title;
        error-popup-message = message;
        error-popup.show();
    }
    error-popup := PopupWindow {
        height: main-window.height;
        width: main-window.width;
        x: 0;
        y: 0;
        close-policy: no-auto-close;

        VerticalLayout {
            Rectangle {}
            HorizontalLayout {
                Rectangle {}
                Rectangle {
                    max-width: 600px;
                    height: 25%;
                    border-radius: 4px;
                    background: rgba(0, 0, 0, 0.8);
                    VerticalLayout {
                        padding: 10px;
                        Text {
                            wrap: char-wrap;
                            text: error-popup-title;
                            font-size: 24px;
                        }

                        Text {
                            wrap: word-wrap;
                            text: error-popup-message;
                            font-size: 12px;
                        }

                        StandardButton {
                            kind: ok;
                            clicked => {
                                if root.shutdown-state {
                                    root.close-without-saving();
                                }
                                error-popup.close();
                            }
                        }
                    }
                }
                Rectangle {}
            }
            Rectangle {}
        }
    }

    // Main window
    main-window := VerticalLayout {
        padding-left: 2px;
        padding-right: 2px;
        spacing: 2px;
        top-bar := HorizontalLayout {
            height: missiles-button.preferred-height;
            missiles-button := Button {
                text: "Missiles";
                clicked => {
                    root.open-missiles-view();
                }
            }
            Button {
                text: "Win Predictor";
                clicked => {
                    root.open-win-predictor();
                }
            }
            Rectangle {
                horizontal-stretch: 1.0;
            }
        }
        a := HorizontalLayout {
            padding-bottom: 2px;
            spacing: 2px;
            height: main-window.height - top-bar.height - 2px; // -2px to adjust for spacing and padding
            VerticalLayout {
                alignment: start;
                b := HorizontalLayout {
                    Text {
                        text: "Fleets";
                        font-size: 24px;
                    }
                    HorizontalLayout {
                        alignment: end;
                        Button {
                            text: "Refresh";
                            clicked => {
                                root.reload-fleets();
                            }
                        }
                    }
                }

                ScrollView {
                    height: min(main-window.height - b.preferred-height - 4px, h.preferred-height);
                    h := VerticalLayout {
                        for fleet[idx] in fleets: FleetListItem {
                            name: fleet.name;
                            short-path: fleet.short-path;

                            viewing => {
                                fleet.selected = !fleet.selected;
                                if fleet.selected {
                                    root.viewing(idx);
                                    cur-fleet-idx = idx;
                                }
                                else {
                                    root.viewing(-1);
                                    cur-fleet-idx = -1;
                                    root.set-description("");
                                }
                            }
                            states [
                                selected when fleet.selected: {
                                    background-colour: rgba(204, 134, 092, 1);
                                }
                                unselected when !fleet.selected: {
                                    background-colour: rgba(0, 0, 0, 0);
                                }
                            ]
                        }
                    }
                }
            }

            VerticalLayout {
                width: 240px;
                
                Text {
                    height: b.height;
                    font-size: 24px;
                    text: "Actions";
                }

                actions-pane := ActionsPane {
                    tags: root.tags;

                    merge(output-name) => {
                        root.merge(output-name);
                    }

                    open-fleet-editor => {
                        root.open-fleet-editor();
                    }

                    add-tag(tag) => {
                        root.add-tag(tag);
                    }

                    remove-tag(idx) => {
                        root.remove-tag(idx);
                    }

                    lookup-tag(name) => {
                        root.lookup-tag(name);
                    }
                }
            }
        }
    }
}


